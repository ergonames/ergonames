/*

ErgoNames Minting Contract

========== Context Variables ==========

0 - ergonameHash - Coll[Byte] - hash of the name to register
1 - proof - Coll[Byte] - proof ergonameHash and tokenId insertion into the registry

========== OUTPUTS ==========

0 - mintBox - Box - new ErgoName token box sent to the receiver address specified in the context variables
1 - updatedRegistryBox - Box - registry box with updated registry

*/

{
    val registryInputBox = SELF
    val userInputBox = INPUTS(1)

    val registry = registryInputBox.R4[AvlTree].get
    
    val tokenIdToRegister = registryInputBox.id

    val ergonameHash = getVar[Coll[Byte]](0).get
    val proof = getVar[Coll[Byte]](1).get
    val nameToRegister = userInputBox.R4[Coll[Byte]].get
    val receiverAddress = userInputBox.R5[Coll[Byte]].get

    val mintBox = OUTPUTS(0)
    val updatedRegistryBox = OUTPUTS(1)

    val newErgoNameToken = mintBox.tokens(0)

    val mintNewErgoName = {
        val validErgoNameTokenId = newErgoNameToken._1 == tokenIdToRegister
        val validErgoNameTokenAmount = newErgoNameToken._2 == 1
        val validErgoNameName = mintBox.R4[Coll[Byte]].get == nameToRegister
        val validReceiver = mintBox.propositionBytes == receiverAddress

        validErgoNameTokenId && validErgoNameTokenAmount && validErgoNameName && validReceiver
    }

    val updateRegistry = {
        val updatedRegistry = registry.insert(Coll((ergonameHash, tokenIdToRegister)), proof).get
        val validRegistryUpdate = updatedRegistryBox.R4[AvlTree].get.digest == updatedRegistry.digest
        val validScript = updatedRegistryBox.propositionBytes == registryInputBox.propositionBytes

        validRegistryUpdate && validScript
    }

    val validRegistration = {
        mintNewErgoName && updateRegistry
    }

    sigmaProp(validRegistration)
}